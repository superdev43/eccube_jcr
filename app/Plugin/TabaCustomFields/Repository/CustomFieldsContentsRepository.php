<?php
/*
 * This file is part of the TabaCustomFields plugin
 *
 * Copyright (C) SPREAD WORKS Inc. All Rights Reserved.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\TabaCustomFields\Repository;

use Eccube\Repository\AbstractRepository;
use Doctrine\Common\Persistence\ManagerRegistry;
use Plugin\TabaCustomFields\Entity\CustomFieldsContents;

/**
 * CustomFieldsContentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomFieldsContentsRepository extends AbstractRepository
{
    /**
     * CustomFieldsContentsRepository constructor.
     *
     * @param ManagerRegistry $registry
     * @param string $entityClass
     */
    public function __construct(ManagerRegistry $registry, $entityClass = CustomFieldsContents::class)
    {
        parent::__construct($registry, $entityClass);
    }

    /**
     * Entityの追加コンテンツを全て返す
     * 
     * @param $target_entity
     * @return array
     */
    public function getEntityCustomFieldsContents($target_entity) {
        $entityCustomFieldsContents = $this->findBy(array(
            'entity' => $target_entity,
        ));
        return $entityCustomFieldsContents;
    }

    /**
     * 登録済みの追加コンテンツを返す
     * 
     * @param $target_entity
     * @param $target_id
     * @return CustomFieldsContentsRepository
     */
    public function getCustomFieldsContents($target_entity, $target_id) {
        $customFieldsContent = $this->findOneBy(array(
            'entity' => $target_entity,
            'targetId' => $target_id,
        ));
        return $customFieldsContent;
    }
    
    /**
     * 新規カスタムフィールドコンテンツオブジェクトを返します
     * 
     * @param $target_entity
     * @param $target_id
     * @return CustomFieldsContentsRepository
     */
    public function newCustomFieldsContents($target_entity, $target_id)
    {
        $customFieldsContents =new \Plugin\TabaCustomFields\Entity\CustomFieldsContents();
        $customFieldsContents->setEntity($target_entity);
        $customFieldsContents->setTargetId($target_id);

        return $customFieldsContents;
    }

    /**
     * 入力値と重複しているデータ検索します.
     *
     * @param array $conditions
     * @return boolean 
     */
    public function isUnique(array $conditions)
    {
        $parameters = array();
        $parameters['entity'] = $conditions['entity'];
        $parameters['columnValue'] = $conditions['columnValue'];
        if (isset($conditions['targetId'])) {
            $parameters['targetId'] = $conditions['targetId'];
            $count = $this->createQueryBuilder('cc')
                ->select('count(cc.targetId)')
                ->where('cc.targetId != :targetId')
                ->andWhere('cc.entity = :entity')
                ->andWhere('cc.'.$conditions['columnFieldName'].' = :columnValue')
                ->setParameters($parameters)
                ->getQuery()
                ->getSingleScalarResult();
        } else {
            $count = $this->createQueryBuilder('cc')
                ->select('count(cc.targetId)')
                ->where('cc.entity = :entity')
                ->andWhere('cc.'.$conditions['columnFieldName'].' = :columnValue')
                ->setParameters($parameters)
                ->getQuery()
                ->getSingleScalarResult();
        }
        if ($count) {
            return false;
        }
        return true;
    }

    public function getFields($targetId) {
        $parameters = array();
        $parameters['targetId'] = $targetId;
        $parameters['entity'] = 'product';
        
        $customFields = $this->createQueryBuilder('cc')
        ->select('cc')
        ->where('cc.targetId = :targetId')
        ->andWhere('cc.entity = :entity')
        ->setParameters($parameters)
        ->getQuery()
        ->getSingleResult();
        return $customFields;
    }

    public function getFirstProductId() {
        $parameters = array();
        $parameters['plgFieldContent1'] = 1;
        $parameters['entity'] = 'product';
        
        $customFields = $this->createQueryBuilder('cc')
        ->select('cc.targetId')
        ->where('cc.plgFieldContent1 = :plgFieldContent1')
        ->andWhere('cc.entity = :entity')
        ->setParameters($parameters)
        ->getQuery()
        ->getSingleResult();
        return $customFields;
    }

    public function getFirstRecommandProductId() {
        $parameters = array();
        $parameters['plgFieldContent8'] = 1;
        $parameters['entity'] = 'product';
        
        $customFields = $this->createQueryBuilder('cc')
        ->select('cc.targetId')
        ->where('cc.plgFieldContent8 = :plgFieldContent8')
        ->andWhere('cc.entity = :entity')
        ->setParameters($parameters)
        ->getQuery()
        ->getSingleResult();
        return $customFields;
    }

    public function getFirstRecommandProducts() {
        $parameters = array();
        // $parameters['plgFieldContent8'] = 1;
        $parameters['entity'] = 'product';
        $parameters['null'] = 'NULL';
        
        $customFields = $this->createQueryBuilder('cc')
        ->select(['cc.targetId', 'cc.plgFieldContent8'])
        ->where('cc.entity = :entity')
        ->andWhere('cc.plgFieldContent8 != :null')
        ->setParameters($parameters)
        ->orderBy('cc.plgFieldContent8', 'ASC')
        ->getQuery()
        ->getResult();
        // $customFields['cnt'] = $this->createQueryBuilder('cc')
        // ->select('count(cc.targetId)')
        // ->where('cc.entity = :entity')
        // ->andWhere('cc.plgFieldContent8 != :null')
        // ->setParameters($parameters)
        // ->getQuery()
        // ->getResult();
        return $customFields;
    }

    public function getRankProducts() {
        $parameters = array();
        // $parameters['plgFieldContent8'] = 1;
        $parameters['entity'] = 'product';
        $parameters['null'] = 'NULL';
        
        $customFields = $this->createQueryBuilder('cc')
        ->select(['cc.targetId', 'cc.plgFieldContent1'])
        ->where('cc.entity = :entity')
        ->andWhere('cc.plgFieldContent1 != :null')
        ->setParameters($parameters)
        ->orderBy('cc.plgFieldContent1', 'ASC')
        ->getQuery()
        ->getResult();
        return $customFields;
    }

}
